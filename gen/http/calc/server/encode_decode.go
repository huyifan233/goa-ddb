// Code generated by goa v3.0.2, DO NOT EDIT.
//
// calc HTTP server encoders and decoders
//
// Command:
// $ goa gen goa-ddb/design

package server

import (
	"context"
	calc "goa-ddb/gen/calc"
	calcviews "goa-ddb/gen/calc/views"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAddResponse returns an encoder for responses returned by the calc add
// endpoint.
func EncodeAddResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(int)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAddRequest returns a decoder for requests sent to the calc add
// endpoint.
func DecodeAddRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			a   int
			b   int
			err error

			params = mux.Vars(r)
		)
		{
			aRaw := params["a"]
			v, err2 := strconv.ParseInt(aRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("a", aRaw, "integer"))
			}
			a = int(v)
		}
		{
			bRaw := params["b"]
			v, err2 := strconv.ParseInt(bRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("b", bRaw, "integer"))
			}
			b = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewAddPayload(a, b)

		return payload, nil
	}
}

// EncodeAddresumeResponse returns an encoder for responses returned by the
// calc addresume endpoint.
func EncodeAddresumeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.([]int)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAddresumeRequest returns a decoder for requests sent to the calc
// addresume endpoint.
func DecodeAddresumeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var payload []*calc.Resume
		if err := decoder(r).Decode(&payload); err != nil {
			return nil, goa.DecodePayloadError(err.Error())
		}

		return payload, nil
	}
}

// NewCalcAddresumeDecoder returns a decoder to decode the multipart request
// for the "calc" service "addresume" endpoint.
func NewCalcAddresumeDecoder(mux goahttp.Muxer, calcAddresumeDecoderFn CalcAddresumeDecoderFunc) func(r *http.Request) goahttp.Decoder {
	return func(r *http.Request) goahttp.Decoder {
		return goahttp.EncodingFunc(func(v interface{}) error {
			mr, merr := r.MultipartReader()
			if merr != nil {
				return merr
			}
			p := v.(*[]*calc.Resume)
			if err := calcAddresumeDecoderFn(mr, p); err != nil {
				return err
			}
			return nil
		})
	}
}

// EncodeListResponse returns an encoder for responses returned by the calc
// list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(calcviews.StoredResumeCollection)
		enc := encoder(ctx, w)
		body := NewStoredResumeResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// unmarshalExperienceRequestBodyToCalcExperience builds a value of type
// *calc.Experience from a value of type *ExperienceRequestBody.
func unmarshalExperienceRequestBodyToCalcExperience(v *ExperienceRequestBody) *calc.Experience {
	if v == nil {
		return nil
	}
	res := &calc.Experience{
		Company:  *v.Company,
		Role:     *v.Role,
		Duration: *v.Duration,
	}

	return res
}

// unmarshalEducationRequestBodyToCalcEducation builds a value of type
// *calc.Education from a value of type *EducationRequestBody.
func unmarshalEducationRequestBodyToCalcEducation(v *EducationRequestBody) *calc.Education {
	if v == nil {
		return nil
	}
	res := &calc.Education{
		Institution: *v.Institution,
		Major:       *v.Major,
	}

	return res
}

// marshalCalcviewsExperienceViewToExperienceResponse builds a value of type
// *ExperienceResponse from a value of type *calcviews.ExperienceView.
func marshalCalcviewsExperienceViewToExperienceResponse(v *calcviews.ExperienceView) *ExperienceResponse {
	res := &ExperienceResponse{
		Company:  *v.Company,
		Role:     *v.Role,
		Duration: *v.Duration,
	}

	return res
}

// marshalCalcviewsEducationViewToEducationResponse builds a value of type
// *EducationResponse from a value of type *calcviews.EducationView.
func marshalCalcviewsEducationViewToEducationResponse(v *calcviews.EducationView) *EducationResponse {
	res := &EducationResponse{
		Institution: *v.Institution,
		Major:       *v.Major,
	}

	return res
}
