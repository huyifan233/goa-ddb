// Code generated by goa v3.0.2, DO NOT EDIT.
//
// calc HTTP client encoders and decoders
//
// Command:
// $ goa gen goa-ddb/design

package client

import (
	"bytes"
	"context"
	calc "goa-ddb/gen/calc"
	calcviews "goa-ddb/gen/calc/views"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "calc" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		a int
		b int
	)
	{
		p, ok := v.(*calc.AddPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("calc", "add", "*calc.AddPayload", v)
		}
		a = p.A
		b = p.B
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddCalcPath(a, b)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("calc", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAddResponse returns a decoder for responses returned by the calc add
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body int
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calc", "add", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("calc", "add", resp.StatusCode, string(body))
		}
	}
}

// BuildAddresumeRequest instantiates a HTTP request object with method and
// path set to call the "calc" service "addresume" endpoint
func (c *Client) BuildAddresumeRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddresumeCalcPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("calc", "addresume", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddresumeRequest returns an encoder for requests sent to the calc
// addresume server.
func EncodeAddresumeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.([]*calc.Resume)
		if !ok {
			return goahttp.ErrInvalidType("calc", "addresume", "[]*calc.Resume", v)
		}
		if err := encoder(req).Encode(p); err != nil {
			return goahttp.ErrEncodingError("calc", "addresume", err)
		}
		return nil
	}
}

// NewCalcAddresumeEncoder returns an encoder to encode the multipart request
// for the "calc" service "addresume" endpoint.
func NewCalcAddresumeEncoder(encoderFn CalcAddresumeEncoderFunc) func(r *http.Request) goahttp.Encoder {
	return func(r *http.Request) goahttp.Encoder {
		body := &bytes.Buffer{}
		mw := multipart.NewWriter(body)
		return goahttp.EncodingFunc(func(v interface{}) error {
			p := v.([]*calc.Resume)
			if err := encoderFn(mw, p); err != nil {
				return err
			}
			r.Body = ioutil.NopCloser(body)
			r.Header.Set("Content-Type", mw.FormDataContentType())
			return mw.Close()
		})
	}
}

// DecodeAddresumeResponse returns a decoder for responses returned by the calc
// addresume endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeAddresumeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []int
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calc", "addresume", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("calc", "addresume", resp.StatusCode, string(body))
		}
	}
}

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "calc" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListCalcPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("calc", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the calc list
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calc", "list", err)
			}
			p := NewListStoredResumeCollectionOK(body)
			view := "default"
			vres := calcviews.StoredResumeCollection{p, view}
			if err = calcviews.ValidateStoredResumeCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("calc", "list", err)
			}
			res := calc.NewStoredResumeCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("calc", "list", resp.StatusCode, string(body))
		}
	}
}

// marshalCalcExperienceToExperienceRequestBody builds a value of type
// *ExperienceRequestBody from a value of type *calc.Experience.
func marshalCalcExperienceToExperienceRequestBody(v *calc.Experience) *ExperienceRequestBody {
	if v == nil {
		return nil
	}
	res := &ExperienceRequestBody{
		Company:  v.Company,
		Role:     v.Role,
		Duration: v.Duration,
	}

	return res
}

// marshalCalcEducationToEducationRequestBody builds a value of type
// *EducationRequestBody from a value of type *calc.Education.
func marshalCalcEducationToEducationRequestBody(v *calc.Education) *EducationRequestBody {
	if v == nil {
		return nil
	}
	res := &EducationRequestBody{
		Institution: v.Institution,
		Major:       v.Major,
	}

	return res
}

// marshalExperienceRequestBodyToCalcExperience builds a value of type
// *calc.Experience from a value of type *ExperienceRequestBody.
func marshalExperienceRequestBodyToCalcExperience(v *ExperienceRequestBody) *calc.Experience {
	if v == nil {
		return nil
	}
	res := &calc.Experience{
		Company:  v.Company,
		Role:     v.Role,
		Duration: v.Duration,
	}

	return res
}

// marshalEducationRequestBodyToCalcEducation builds a value of type
// *calc.Education from a value of type *EducationRequestBody.
func marshalEducationRequestBodyToCalcEducation(v *EducationRequestBody) *calc.Education {
	if v == nil {
		return nil
	}
	res := &calc.Education{
		Institution: v.Institution,
		Major:       v.Major,
	}

	return res
}

// unmarshalExperienceResponseToCalcviewsExperienceView builds a value of type
// *calcviews.ExperienceView from a value of type *ExperienceResponse.
func unmarshalExperienceResponseToCalcviewsExperienceView(v *ExperienceResponse) *calcviews.ExperienceView {
	res := &calcviews.ExperienceView{
		Company:  v.Company,
		Role:     v.Role,
		Duration: v.Duration,
	}

	return res
}

// unmarshalEducationResponseToCalcviewsEducationView builds a value of type
// *calcviews.EducationView from a value of type *EducationResponse.
func unmarshalEducationResponseToCalcviewsEducationView(v *EducationResponse) *calcviews.EducationView {
	res := &calcviews.EducationView{
		Institution: v.Institution,
		Major:       v.Major,
	}

	return res
}
