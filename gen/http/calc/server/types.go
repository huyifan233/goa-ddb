// Code generated by goa v3.0.2, DO NOT EDIT.
//
// calc HTTP server types
//
// Command:
// $ goa gen goa-ddb/design

package server

import (
	calc "goa-ddb/gen/calc"
	calcviews "goa-ddb/gen/calc/views"

	goa "goa.design/goa/v3/pkg"
)

// StoredResumeResponseCollection is the type of the "calc" service "list"
// endpoint HTTP response body.
type StoredResumeResponseCollection []*StoredResumeResponse

// StoredResumeResponse is used to define fields on response body types.
type StoredResumeResponse struct {
	// ID of the resume
	ID int `form:"id" json:"id" xml:"id"`
	// Name in the resume
	Name string `form:"name" json:"name" xml:"name"`
	// Experience section in the resume
	Experience []*ExperienceResponse `form:"experience" json:"experience" xml:"experience"`
	// Education section in the resume
	Education []*EducationResponse `form:"education" json:"education" xml:"education"`
	// Time when resume was created
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
}

// ExperienceResponse is used to define fields on response body types.
type ExperienceResponse struct {
	// Name of the company
	Company string `form:"company" json:"company" xml:"company"`
	// Name of the role in the company
	Role string `form:"role" json:"role" xml:"role"`
	// Duration (in years) in the company
	Duration int `form:"duration" json:"duration" xml:"duration"`
}

// EducationResponse is used to define fields on response body types.
type EducationResponse struct {
	// Name of the institution
	Institution string `form:"institution" json:"institution" xml:"institution"`
	// Major name
	Major string `form:"major" json:"major" xml:"major"`
}

// ResumeRequestBody is used to define fields on request body types.
type ResumeRequestBody struct {
	// Name in the resume
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Experience section in the resume
	Experience []*ExperienceRequestBody `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
	// Education section in the resume
	Education []*EducationRequestBody `form:"education,omitempty" json:"education,omitempty" xml:"education,omitempty"`
}

// ExperienceRequestBody is used to define fields on request body types.
type ExperienceRequestBody struct {
	// Name of the company
	Company *string `form:"company,omitempty" json:"company,omitempty" xml:"company,omitempty"`
	// Name of the role in the company
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// Duration (in years) in the company
	Duration *int `form:"duration,omitempty" json:"duration,omitempty" xml:"duration,omitempty"`
}

// EducationRequestBody is used to define fields on request body types.
type EducationRequestBody struct {
	// Name of the institution
	Institution *string `form:"institution,omitempty" json:"institution,omitempty" xml:"institution,omitempty"`
	// Major name
	Major *string `form:"major,omitempty" json:"major,omitempty" xml:"major,omitempty"`
}

// NewStoredResumeResponseCollection builds the HTTP response body from the
// result of the "list" endpoint of the "calc" service.
func NewStoredResumeResponseCollection(res calcviews.StoredResumeCollectionView) StoredResumeResponseCollection {
	body := make([]*StoredResumeResponse, len(res))
	for i, val := range res {
		body[i] = &StoredResumeResponse{
			ID:        *val.ID,
			CreatedAt: *val.CreatedAt,
			Name:      *val.Name,
		}
		if val.Experience != nil {
			body[i].Experience = make([]*ExperienceResponse, len(val.Experience))
			for j, val := range val.Experience {
				body[i].Experience[j] = marshalCalcviewsExperienceViewToExperienceResponse(val)
			}
		}
		if val.Education != nil {
			body[i].Education = make([]*EducationResponse, len(val.Education))
			for j, val := range val.Education {
				body[i].Education[j] = marshalCalcviewsEducationViewToEducationResponse(val)
			}
		}
	}
	return body
}

// NewAddPayload builds a calc service add endpoint payload.
func NewAddPayload(a int, b int) *calc.AddPayload {
	return &calc.AddPayload{
		A: a,
		B: b,
	}
}

// NewAddresumeResume builds a calc service addresume endpoint payload.
func NewAddresumeResume(body []*ResumeRequestBody) []*calc.Resume {
	v := make([]*calc.Resume, len(body))
	for i, val := range body {
		v[i] = &calc.Resume{
			Name: *val.Name,
		}
		if val.Experience != nil {
			v[i].Experience = make([]*calc.Experience, len(val.Experience))
			for j, val := range val.Experience {
				v[i].Experience[j] = unmarshalExperienceRequestBodyToCalcExperience(val)
			}
		}
		if val.Education != nil {
			v[i].Education = make([]*calc.Education, len(val.Education))
			for j, val := range val.Education {
				v[i].Education[j] = unmarshalEducationRequestBodyToCalcEducation(val)
			}
		}
	}
	return v
}

// ValidateStoredResumeResponse runs the validations defined on
// StoredResumeResponse
func ValidateStoredResumeResponse(body *StoredResumeResponse) (err error) {
	if body.Experience == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("experience", "body"))
	}
	if body.Education == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("education", "body"))
	}
	return
}

// ValidateResumeRequestBody runs the validations defined on ResumeRequestBody
func ValidateResumeRequestBody(body *ResumeRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateExperienceRequestBody runs the validations defined on
// ExperienceRequestBody
func ValidateExperienceRequestBody(body *ExperienceRequestBody) (err error) {
	if body.Company == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("company", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	if body.Duration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("duration", "body"))
	}
	return
}

// ValidateEducationRequestBody runs the validations defined on
// EducationRequestBody
func ValidateEducationRequestBody(body *EducationRequestBody) (err error) {
	if body.Institution == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("institution", "body"))
	}
	if body.Major == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("major", "body"))
	}
	return
}
