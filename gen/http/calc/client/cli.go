// Code generated by goa v3.0.2, DO NOT EDIT.
//
// calc HTTP client CLI support package
//
// Command:
// $ goa gen goa-ddb/design

package client

import (
	"encoding/json"
	"fmt"
	calc "goa-ddb/gen/calc"
	"strconv"
)

// BuildAddPayload builds the payload for the calc add endpoint from CLI flags.
func BuildAddPayload(calcAddA string, calcAddB string) (*calc.AddPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(calcAddA, 10, 64)
		a = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(calcAddB, 10, 64)
		b = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for b, must be INT")
		}
	}
	payload := &calc.AddPayload{
		A: a,
		B: b,
	}
	return payload, nil
}

// BuildAddresumePayload builds the payload for the calc addresume endpoint
// from CLI flags.
func BuildAddresumePayload(calcAddresumeBody string) ([]*calc.Resume, error) {
	var err error
	var body []*ResumeRequestBody
	{
		err = json.Unmarshal([]byte(calcAddresumeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'[\n      {\n         \"education\": [\n            {\n               \"institution\": \"Ex quae facilis necessitatibus.\",\n               \"major\": \"Quasi est eum ad.\"\n            },\n            {\n               \"institution\": \"Ex quae facilis necessitatibus.\",\n               \"major\": \"Quasi est eum ad.\"\n            }\n         ],\n         \"experience\": [\n            {\n               \"company\": \"Quo est et.\",\n               \"duration\": 5058434971892362792,\n               \"role\": \"Aut adipisci temporibus laboriosam.\"\n            },\n            {\n               \"company\": \"Quo est et.\",\n               \"duration\": 5058434971892362792,\n               \"role\": \"Aut adipisci temporibus laboriosam.\"\n            },\n            {\n               \"company\": \"Quo est et.\",\n               \"duration\": 5058434971892362792,\n               \"role\": \"Aut adipisci temporibus laboriosam.\"\n            }\n         ],\n         \"name\": \"Iusto fugiat sed repudiandae.\"\n      },\n      {\n         \"education\": [\n            {\n               \"institution\": \"Ex quae facilis necessitatibus.\",\n               \"major\": \"Quasi est eum ad.\"\n            },\n            {\n               \"institution\": \"Ex quae facilis necessitatibus.\",\n               \"major\": \"Quasi est eum ad.\"\n            }\n         ],\n         \"experience\": [\n            {\n               \"company\": \"Quo est et.\",\n               \"duration\": 5058434971892362792,\n               \"role\": \"Aut adipisci temporibus laboriosam.\"\n            },\n            {\n               \"company\": \"Quo est et.\",\n               \"duration\": 5058434971892362792,\n               \"role\": \"Aut adipisci temporibus laboriosam.\"\n            },\n            {\n               \"company\": \"Quo est et.\",\n               \"duration\": 5058434971892362792,\n               \"role\": \"Aut adipisci temporibus laboriosam.\"\n            }\n         ],\n         \"name\": \"Iusto fugiat sed repudiandae.\"\n      }\n   ]'")
		}
	}
	v := make([]*calc.Resume, len(body))
	for i, val := range body {
		v[i] = &calc.Resume{
			Name: val.Name,
		}
		if val.Experience != nil {
			v[i].Experience = make([]*calc.Experience, len(val.Experience))
			for j, val := range val.Experience {
				v[i].Experience[j] = marshalExperienceRequestBodyToCalcExperience(val)
			}
		}
		if val.Education != nil {
			v[i].Education = make([]*calc.Education, len(val.Education))
			for j, val := range val.Education {
				v[i].Education[j] = marshalEducationRequestBodyToCalcEducation(val)
			}
		}
	}
	return v, nil
}
